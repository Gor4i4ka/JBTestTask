File
looksLikeKlibComponentByteArray
readByteAsIntCharArray
setByteArray
setReadContext
textResourceFactory ProgramSourceFragment
isNotBlankEnvironment
stringEnvironment
stringList%FunctionDescriptor
makeValueParameterKotlinType
isNamedObjectKotlinType
isIBinderType
isBundleType
isSizeFType
isPersistableBundleType
isFileDescriptorKotlinTypeMapper
mapTypeSafeType
isSparseBooleanArrayType
isBoxedPrimitiveType
isSparseIntArrayType
isStringType
isSparseArrayKotlinType
isSerializableType
isPrimitiveType
isBlobKotlinType
isCharSequenceKotlinType
isIInterfaceKotlinType
isEnumKotlinType
isExceptionType
isSizeType
isSparseLongArrayKaptTask
createKaptSourceSetProject
pathOrName-AbstractKotlinCompile
createCompilerArguments%AbstractKotlinCompile
createSourceSet,AbstractKotlinCompile
createAndroidSourceSet0AbstractKotlinCompile
createExperimentalFeaturesProject
isAndroidFileCollection
filterJavaRootsString
parseIntOrNullProject
applyPlugin/MultipleCandidatesDetails
chooseCandidateByName2Project
dynamicallyApplyWhenAndroidPluginIsApplied6KotlinJsCompilation
shouldDependOnDukatIntegrationTask?KotlinJsCompilation
shouldLegacyUseIrTargetDukatIntegrationTaskWebpackMajorVersion
chooseString
disablesDevirtualization String
startsWithIncorrectPrefix'Project
getOrRegisterIncorrectArgumentsString
withIndentProject
klibOutputDirectory8KotlinNativeCompilationData
apiElementsConfigurationName5KotlinMultiplatformExtension
cocoapodsExtensionOrNullProperties
readNullablePropertyProperties
readProperty&Project
showMissingNativeStdlibWarning#Project
cinteropKlibLibraryElementsString
asModuleNameClass
getMethodOrNullMutableSet
addOrRetainAll,Project
disableClassloaderCacheForProcessorsProject
isUseWorkerApi!Project
isIncludeCompileClasspathProject
findPropertySafe%Project
isKaptKeepKdocCommentsInStubsProject
classLoadersCacheSizeProject
isInfoAsWarningsProject
getBooleanOptionValueProject
isIncrementalKaptProject
isKaptVerboseProject
findKaptConfigurationString
escapeQuotesString
toPrettyStringSequence
escapeQuotesForWindowsMap
toPrettyStringCollection
toPrettyStringString
normalizeForFlagFileCommonizerTarget
fileName StringBuilder
appendReceiverTypeStringBuilder
appendReceiversClass
primitiveTypeFqName
implementedWith*SimpleFunctionDescriptor
isRemoveAtByIndex7CallableMemberDescriptor
hasErasedValueParametersInJava<CallableMemberDescriptor
isBuiltinWithSpecialDescriptorInJvm0CallableMemberDescriptor
getSpecialSignatureInfoName
sameAsRenamedInJvmBuiltin<CallableMemberDescriptor
hasBuiltinSpecialPropertyFqNameImpl<CallableMemberDescriptor
getBuiltinSpecialPropertyGetterName'TypeAliasDescriptor
computeExpandedType)UnwrappedType
canHaveUndefinedNullabilityArray
dropFirstAndLastArray
dropLastArray
dropFirstIterable
makePathsStringIrSimpleFunction
isMain0IrSimpleFunction
isSuitableForMainParametersSize0DeclarationDescriptor
isPlatformSpecificExported$CommonProxy
fallbackIfMethodNotFoundCommon
asProxyReflectionState
asProxyIrFunction
getJvmClassNameIrFunction
getSignature'IrFunction
isExtensionReceiverPrimitiveIrFunction
getMethodType,IrFunction
isValueParameterPrimitiveAsObject'IrFunction
getOriginalOverriddenSymbols(IrFunction
isReturnTypePrimitiveAsObjectIrType
getClass:DeclarationDescriptorWithVisibility
ownEffectiveVisibilityResolvedCall
isJsCallKotlinType
isExportableKotlinType
isExportableReturn+CallableMemberDescriptor
isNullableProperty7CallableMemberDescriptor
isNonAbstractMemberOfInterface*KtDeclarationWithBody
hasValidExternalBody*KtExpression
isDefinedExternallyExpressionPrimitiveType
lowerCaseName#KtBinaryExpression
appliedToDynamicKotlinType
primitive*TranslationContext
wrapFunctionCallableRef*TranslationContext
wrapPropertyCallableRefFunctionCallInfo
doTranslate VariableAccessInfo
getDescriptorVariableAccessInfo
getArgsVariableAccessInfo
canBeApplyFunctionCallInfo
getDescriptorFunctionCallInfo
getArgs VariableAccessInfo
bothReceiversKtElement
hasChildrenInSet&KtElement
getLeavesOrReachableChildrenList
mergeAdjacentTextRanges3List
removeReachableElementsWithMeaninglessSiblingsString
splitByPathSeparator!Manifest
getKotlinLanguageVersionAny
assertNotNullMessageCollector
issueCompilationContext
runFrontend<CompilationContext
createComponentsForIncrementalCompilation CompilationContext
compileModuleCompilationContext
runBackend,CompilerConfiguration
setupJdkClasspathRootsFirLightSourceElement
locationFirPsiSourceElement
locationFirDiagnostic
locationClientId
isLocalConeAttribute
predefinedConeKotlinType
priorityFirTypeRef
priorityFirTypeProjection
priorityAFirFunctionBuilder
configureAnnotationsTypeParametersAndSignature3FirFunctionBuilder
configureAnnotationsAndSignature3FirPropertyBuilder
configureAnnotationsAndSignatureAFirPropertyBuilder
configureAnnotationsTypeParametersAndSignatureChar
isAsciiLowerCaseChar
isAsciiUpperCaseSet
join$FirTypeParameterRef
shouldBeFlexibleCandidate
getReceiverTypeUNewConstraintSystemImpl
isContainedInInvariantOrContravariantPositionsAmongUpperBound2NewConstraintSystemImpl
getDependentTypeParametersUConeTypeVariable
recordInfoAboutTypeVariableUsagesAsInvariantOrContravariantParameterFNewConstraintSystemImpl
isContainedInInvariantOrContravariantPositionsVNewConstraintSystemImpl
isContainedInInvariantOrContravariantPositionsWithDependencies2NewConstraintSystemImpl
getTypeParameterByVariable3NewConstraintSystemImpl
getDependingOnTypeParameterGPostponedAtomWithRevisableExpectedType
isFunctionExpressionWithReceiver7FirAnonymousFunction
collectDeclaredValueParameterTypesKotlinTypeMarker
unCapture#TypeVariableMarker
shouldBeFlexible:PostponedAtomWithRevisableExpectedType
isAnonymousFunctionKotlinTypeMarker
refineTypeTypeVariableMarker
isReified-TypeVariableMarker
hasOnlyInputTypesAttributeMutableList
collectMissingCases%ConeKotlinType
unwrapIntersectionType%FirBasedSymbol
collectAllSubclassesTo#FirBasedSymbol
collectAllSubclasses#FirConstExpression
isApplicableWith)ConeBooleanExpression
buildTypeStatementsFirFunction
getParameterType!ConeKotlinType
isInapplicableWithFirFunction
getParameterSymbol!CheckerContext
containingProperty%LogicSystem
approveOperationStatementCFGNode
collectBranchExitsFirFunction
isInPlaceLambda&FirFunctionCall
getArgumentCallsEffect"FirExpression
toQualifiedReferenceFirTypeRef
isFunctionalTypeRef9FirContractDescription
getParameterCallsEffectDeclaration.FirContractDescription
getParameterCallsEffect"ConeKotlinType
removeOutProjection&ConeTypeProjection
removeOutProjection7ConeInferenceContext
isTypeConstructorEqualOrSubClassOf FirTypeRef
isInConstructorCallee!FirSourceElement
getRawIdentifier/FirValueParameterSymbol
isCatchElementParameterFirDeclaration
getRawNameFirElement
psiFirSourceElement
psiFirSourceElement
withNavigatorFirElement
withNavigator"ConeInferenceContext
areCompatible!ConeKotlinType
collectUpperBounds'ConeClassLikeType
toTypeArgumentMapping!ConeInferenceContext
isCompatible%ConeClassLikeType
getClassLikeElement%MutableMap
collectTypeArgumentMapping5ConeInferenceContext
areClassesOrInterfacesCompatible FirClassLikeSymbol
getSuperTypes<ConeInferenceContext
prohibitComparisonOfIncompatibleClassesMutableMap
collect)FirTypeParameterSymbol
collectUpperBounds1ConeClassLikeLookupTag
toFirClassWithSuperClasses,ConeClassLikeType
toFirClassWithSuperClasses#FirClassLikeSymbol
getTypeParameterConeKotlinType
isConcreteTypeCollection
areCompatible!ConeKotlinType
collectLowerBounds:ConeInferenceContext
prohibitComparisonOfIncompatibleEnumsFirExpression
isRedundant/FirPropertySymbol
getDestructuringChildrenCount+CheckerContext
containingPropertyVisibility!FirDeclaration
implicitVisibility!KtBinaryExpression
canBeAugmentedKtBinaryExpression
matcherLighterASTNode
canBeAugmented KtBinaryExpression
isCommutativeFirFunctionCall
rangeRightFirIntegerOperatorCall
asLongFirFunctionCall
rangeLeft*FirQualifiedAccessExpression
getCallableIdFirExpression
getPackageFirExpression
getNullability(LighterASTNode
stringParentChildrenCount&FirStatement
stringParentChildrenCount$PsiElement
stringParentChildrenCountControlFlowGraph
allNodesCFGNode
skipNodeFirElement
collectInnerNodes*ConeKotlinType
hasSameNameWithoutModifiersConeKotlinType
isSame&ConeKotlinType
isNullableTypeParameter'FirExpression
canBeDoubleColonLHSAsType&ConeKotlinType
isAllowedInClassLiteral'FirExpression
safeAsTypeParameterSymbol FirPropertySymbol
lazyDelegation FirPropertySymbol
isLoopIterator!FirSourceElement
isWhenExpressionFirWhenExpression
missingCasesFirSourceElement
isIfExpressionConeKotlinType
cannotBeReified>FirTypeParameterSymbol
isReifiedTypeParameterOrFromKotlinArray>FirQualifiedAccessExpression
hasFormOfSuspendModifierForLambda+ConeKotlinType
isRestrictSuspensionReceiver6FirRegularClass
loadExperimentalityForMarkerAnnotation#ConeKotlinType
addExperimentalities$FirBasedSymbol
loadExperimentalities<FirRegularClassSymbol
loadExperimentalityForMarkerAnnotation7FirAnnotationContainer
isAnnotatedWithUseExperimentalOf2FirAnnotationContainer
isExperimentalityAcceptableCheckerContext
findClosestClass-FirTypeRef
coneTypeParameterInQualifiedAccessConeKotlinType
isEnumTypeFirTypeRef
unwrapBound%FirTypeParameterSymbol
originalBounds'FirCallableSymbol
isFromInterfaceOrEnum!FirResolvedImport
resolvesToClass#FirRegularClassSymbol
canBeImportedClassId
resolveToClass!FirRegularClassSymbol
hasFunction'ConeKotlinType
substituteTypeParameters+FirCallableDeclaration
getOverriddenSymbolsFirProperty
hasGetterFirProperty
isNullableFirProperty
hasSetterDiagnosticReporter
reportError%ConeKotlinType
typeParameterFromError6ConeKotlinType
isKClassTypeWithErrorOrNullableArgumentList
firstOrThisFirConstructor
findCycleFirConstructor
getDelegatedFirClassSymbol
getConstructorsList
toTypeList'FirCallableSymbol
valueParameterSymbolsFirBasedSymbol
nameFirClassSymbol
getMembersFirTypeScope
getMembersTo*FirBasedSymbol
isExplicitActualDeclaration6ExpectActualCompatibility
isCompatibleOrWeakCompatible-FirQualifiedAccessExpression
resolvedVariableFirExpression
unwrapped/FirExpression
explicitReceiverOfQualifiedAccess+FirSourceElement
shouldReportOpenFromSource*DiagnosticReporter
reportNothingToOverride*ConeKotlinType
substituteAllTypeParameters'FirTypeScope
retrieveDirectOverriddenOf/DiagnosticReporter
reportTypeMismatchOnProperty.DiagnosticReporter
reportOverridingFinalMember!FirCallableSymbol
checkReturnType4DiagnosticReporter
reportCannotWeakenAccessPrivilege!FirPropertySymbol
checkMutability+DiagnosticReporter
reportVarOverriddenByVal5DiagnosticReporter
reportReturnTypeMismatchOnFunction/DiagnosticReporter
reportTypeMismatchOnVariable4DiagnosticReporter
reportCannotChangeAccessPrivilege!FirCallableSymbol
checkVisibilityMutableMap
checkForMutableList
checkFor%ConeKotlinType
findVisibilityExposureFirRegularClass
descriptionFirProperty
areAccessorsInline"StringBuilder
appendRepresentationStringBuilder
appendOperatorTagKotlinTypeMarker
isRelated#FirClass
collectDeadEndDeclarationsFirElement
isDeadEndClassId
isCloneableId FirProperty
isRelatedToParameter$FirValueParameter
isNotFinalReadOnly$FirRegularClass
isSubtypeOfCloneable&FirTypeRef
isInapplicableParameterType,ConeKotlinType
isGenericArrayOfTypeParameter)ConeKotlinType
isRecursiveInlineClassTypeFirClass
hasThrowableSupertype#FirClass
hasGenericOuterDeclarationCollection
anyIsGenericLighterASTNode
isDeclaration6FlyweightCapableTreeStructure
referencedTypeExpressionFirTypeParameterRef
priorityFirMemberDeclaration
nameFirMemberDeclaration
priorityString
methodString
collectionsIdString
reflectIdName
primitiveArrayIdString
baseIdClassId
unsignedIdOptions
putOption*TypeSystemContext
strictEqualTypesInternal(TypeSystemContext
strictEqualSimpleTypes9TypeSystemCommonSuperTypesContext
hasDifferentFlexibility@TypeSystemCommonSuperTypesContext
hasDifferentFlexibilityAtDepthTypeVariance
toVariance4TypeSystemCommonBackendContextForTypeMapping
mapType:TypeCheckerProviderContext
hasPathByNotMarkedNullableNodes$TypeCheckerState
hasNotNullSupertype'TypeSystemContext
isCommonDenotableType,TypeCheckerState
isSubtypeForSameConstructor@TypeSystemContext
isTypeVariableAgainstStarProjectionForSelfTypeDTypeSystemContext
getTypeParameterForArgumentInBaseIfItEqualToTarget,TypeSystemContext
isStubTypeSubtypeOfAnotherFile
contentIfExistsFile
runIfFileExistsFile
correspondingSourceMapFileProperties
getPropertyOrFailOKtLightClassForSourceDeclaration
getFirstSupertypeFQNameForAnonymousDeclaration*IrTypeOperatorCall
getSamConvertedGetValueIrFunction
propertyNameIrType
asInfoForMangling,JvmBackendContext
computeSyntheticMethodName:JvmBackendContext
createSyntheticMethodForPropertyDelegateLong
nanosecondsLong
microsecondsLong
minutesDouble
minutesDouble
daysDouble
microseconds	Long
daysDouble
hoursDouble
secondsLong
secondsInt
secondsInt
daysLong
milliseconds
Long
hoursDouble
nanosecondsInt
minutesInt
millisecondsInt
microseconds	Int
hoursDouble
millisecondsInt
nanoseconds"FunctionCallInfo
extensionReceiverFunctionCallInfo
noReceiversFunctionCallInfo
bothReceivers!FunctionCallInfo
dispatchReceiver$VariableAccessInfo
extensionReceiver#VariableAccessInfo
dispatchReceiverVariableAccessInfo
noReceivers#KotlinResolutionCandidate
workCount!KotlinResolutionCandidate
processMap
allStrongIncompatibilitiesReadContext
decodeWriteContext
encodeDataOutput
writeBytesWithSizeDataInput
readBytesWithSize'ClassProtoData
getNonPrivateMemberNamesAny
getNonPrivateNamesDataOutput
writeArrayDataInput
readArrayOrNullDataInput
readArrayCoroutineOwner
isFinishedCoroutineStackFrame
realCallerCoroutineStackFrame
owner	Job
buildContinuation
ownerList
toStackTraceFrame"StackTraceElement
isInternalMethodJob
debugStringJarFile
useLong
updateHeadLong
woLong
updateTailLong
withStateLong
addFailReason1Name
sameAsBuiltinMethodWithErasedValueParametersCallableDescriptor
singleSource0IntegerValueTypeConstant
convertToSignedConstant2IntegerValueTypeConstant
convertToUnsignedConstant/ClassDescriptor
getRefinedMemberScopeIfPossible<ClassDescriptor
getRefinedUnsubstitutedMemberScopeIfPossible8TypeAliasDescriptor
getTypeSubstitutorForUnderlyingClassClass
classLiteralValue2JvmBackendContext
createSyntheticMethodForProperty!JvmIrBuilder
calculateOwnerKClassJvmIrBuilder
calculateOwner!IrConstructorCall
annotationClass%IrConstructorCall
applicableTargetSet JvmClassSignature
hasInvalidNameIrExpression
getIntConstIrExpression
getStringConst&ExpressionCodegen
checkTopValueForNullIrFunctionSymbol
toKeyType
isVoidOrPrimitiveWrapperIrType
isInlineClassType JvmMethodSignature
newReturnType7ValueParameterDescriptor
declaresOrInheritsDefaultValueIrExpression
getConstantStringIrFunction
isHashCodeIrFunction
isEqualsIrFunction
isToStringIrClass
collectOverridenSymbols#IrSimpleFunction
isNullableToStringIrSimpleFunction
isToStringIrCall
isStringPlusCallIrCall
isToStringCallIrCall
isSpecialToStringCall&Collection
mostSignificantConflictKind)Collection
mostSignificantConflictReasons"KtFile
hasDeclarationsForPartClass,FunctionDescriptor
shouldHaveTypeSafeBarrier4TypeSystemCommonBackendContext
writeGenericArguments6TypeSystemContext
hasNothingInNonContravariantPosition7TypeSystemCommonBackendContext
writeFormalTypeParameter5TypeSystemCommonBackendContext
getVarianceForWildcardFileMapping
toSMAPFileCollection
toSMAPRangeMapping
toSMAPFileMapping
toSMAPMappingLambdaInfo
capturedParamDesc$StackValue
isCapturedInlineParameterStackValue
isLocalWithNoBoxingMethodNode
isBackwardsJump$MethodNode
requiresEmptyStackOnEntry InstructionAdapter
typeIntrinsic'DeclarationDescriptor
isBuiltInsPackage!InstructionAdapter
invokeHashCode%BindingTrace
checkIfDelegatedProperty$KtAnnotationEntry
useSiteDescriptionBindingTrace
checkTypeReference#BindingTrace
checkIfHasBackingField)BindingTrace
checkAsTopLevelTypeReferenceBindingTrace
checkIfProperty#BindingTrace
checkIfMutablePropertyBindingTrace
checkDeclaration%DeclarationDescriptor
hasBackingFieldGraph
collectReachableGraph
isEdgeInCycleBoolean
and:DeclarationDescriptor
hasImplicitIntegerCoercionAnnotationGraph
isInCycle!TargetListBuilder
propertyTargets,PropertyDescriptor
hasAccessorImplementationUnwrappedType
canContainNull:CallableMemberDescriptor
computeRelevantDirectlyOverridden8CallableMemberDescriptor
getConcreteDeclarationForInline@TypeSystemCommonSuperTypesContext
commonSuperTypeForNotNullTypes:TypeSystemCommonSuperTypesContext
isCapturedStarProjection?TypeSystemCommonSuperTypesContext
commonSuperTypeForSimpleTypesJTypeSystemCommonSuperTypesContext
refineNullabilityForUndefinedNullability2TypeSystemCommonSuperTypesContext
filterSupertypesMTypeSystemCommonSuperTypesContext
typeConstructorsWithExpandedStarProjections1TypeSystemCommonSuperTypesContext
commonSuperType@TypeSystemCommonSuperTypesContext
allCommonSuperTypeConstructorsDTypeSystemCommonSuperTypesContext
supertypesIfCapturedStarProjection8TypeSystemCommonSuperTypesContext
isCapturedTypeVariable3TypeSystemCommonSuperTypesContext
calculateArgument0TypeSystemCommonSuperTypesContext
isTypeVariable;TypeSystemCommonSuperTypesContext
findErrorTypeInSupertypes8TypeSystemCommonSuperTypesContext
uncaptureFromSubtyping6TypeSystemCommonSuperTypesContext
collectAllSupertypesMTypeSystemCommonSuperTypesContext
findSuperTypeConstructorsAndIntersectResult0TypeSystemCommonSuperTypesContext
checkRecursion*TypeSystemCommonSuperTypesContext
uniquifyJTypeSystemCommonSuperTypesContext
isCapturedStubTypeForVariableInSubtyping?TypeSystemCommonSuperTypesContext
superTypeWithGivenConstructor"LanguageVersionSettings
needReportResolvedCall
isIntOperator ResolvedAtom
getResolvedCallAtomString
isUnderscoreOnlyName(Call
hasNoArgumentListButDanglingLambdas&Call
hasFormOfSuspendModifierForLambdaCall
isInfixWithRightLambdaCall
referencedName%ClassDescriptor
containsEntryWithNameReceiverValue
isQualifierFor#BuilderInferenceSession
updateCalls(TypeParameterDescriptor
shouldBeFlexible$KotlinType
isUnitOrSubtypeOrVariableKotlinType
isUnitOrSubtype%KotlinType
hasUnitOrSubtypeReturnType'KotlinResolutionCandidate
checkReceiver/NewConstraintSystem
getDependingOnTypeParameter.NewConstraintSystem
getDependentTypeParametersKotlinType
isComputedBNewConstraintSystem
isContainedInInvariantOrContravariantPositionsgTypeVariableFromCallableDescriptor
recordInfoAboutTypeVariableUsagesAsInvariantOrContravariantParameter.NewConstraintSystem
getTypeParameterByVariableRNewConstraintSystem
isContainedInInvariantOrContravariantPositionsWithDependenciesQNewConstraintSystem
isContainedInInvariantOrContravariantPositionsAmongUpperBound"KotlinResolutionCandidate
hasError!ConstantValue
isGlobalClassWithId)AnnotationDescriptor
getVariadicArguments!AnnotationDescriptor
checkVersion$PsiElement
isExperimentalityAccepted%PsiElement
isDeclarationAnnotatedWith+DeclarationDescriptor
loadExperimentalities6ClassDescriptor
loadExperimentalityForMarkerAnnotation KotlinType
loadExperimentalities2PsiElement
isElementAnnotatedWithUseExperimentalOfPsiElement
anyParentMatches'ClassifierDescriptor
isFromCommonSource.CallCheckerContext
getStableTypesForExpression!ResolvedCall
isStandardComparison&KotlinType
getPrimitiveTypeOrSupertype,KotlinType
promoteIntegerTypeToIntIfRequired)List
findPrimitiveOrNullablePrimitiveType!KtParameter
reportIncorrectInline(KotlinType
isGenericArrayOfTypeParameter&KotlinType
isInapplicableParameterType'ReceiverParameterDescriptor
declaration%UnwrappedType
isKClassWithBadArgument0CallableMemberDescriptor
findNamesakesFromModule0MemberDescriptor
findCompatibleActualForExpected)MemberDescriptor
findAnyActualForExpected0MemberDescriptor
findCompatibleExpectedForActualClassDescriptor
getMembers@ClassifierDescriptorWithTypeParameters
findClassifiersFromModule*ModuleInfo
assertModuleDependencyIsCorrectInputStream
readNameResolver)KtTypeElement
getReferencedTypeExpression+ParametrizedDiagnostic
firstIncompatibilityString
wrapIntoQuotesList
assumesElseBranchOnlyName
wrapIntoQuotes!ObjectInputStream
readAbiSnapshot!ObjectInputStream
readStringArray2ObjectOutputStream
writeMessageWithJvmNameResolver#ObjectOutputStream
writeAbiSnapshot#ObjectOutputStream
writeStringArray3ObjectOutputStream
writeMessageWithNameResolverImplObjectInputStream
readLookupsObjectOutputStream
writeLookups%ObjectInputStream
readBuildDifference!ObjectOutputStream
writeDirtyData'ObjectOutputStream
writeBuildDifferenceObjectOutputStream
writeFqNamesObjectInputStream
readDirtyDataObjectInputStream
readFqNames!ObjectOutputStream
writeBuildInfoObjectInputStream
readBuildInfo;ClassicTypeSystemContext
classicSubstitutionSupertypePolicy                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   